Merge Two Sorted Arrays
â—‹ Merge two sorted arrays into a single sorted array without using extra space.

import java.util.Arrays;

public class MergeSortedArrays {
    public static void main(String[] args) {
        int[] arr1 = {1, 3, 5, 7}; // First sorted array
        int[] arr2 = {2, 4, 6, 8}; // Second sorted array

        mergeWithoutExtraSpace(arr1, arr2);

        System.out.println("Merged Arrays:");
        System.out.println("arr1: " + Arrays.toString(arr1));
        System.out.println("arr2: " + Arrays.toString(arr2));
    }

    public static void mergeWithoutExtraSpace(int[] arr1, int[] arr2) {
        int n = arr1.length, m = arr2.length;
        int gap = (n + m) / 2 + (n + m) % 2; // Initial gap

        while (gap > 0) {
            int i = 0, j = gap;

            // Compare and swap elements within arr1 and arr2
            while (j < (n + m)) {
                if (j < n) {
                    // Compare within arr1
                    if (arr1[i] > arr1[j]) {
                        swap(arr1, i, j);
                    }
                } else if (i < n && j >= n) {
                    // Compare between arr1 and arr2
                    if (arr1[i] > arr2[j - n]) {
                        swapArrays(arr1, arr2, i, j - n);
                    }
                } else {
                    // Compare within arr2
                    if (arr2[i - n] > arr2[j - n]) {
                        swap(arr2, i - n, j - n);
                    }
                }
                i++;
                j++;
            }

            // Reduce the gap
            if (gap == 1) {
                break;
            }
            gap = gap / 2 + gap % 2;
        }
    }

    private static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    private static void swapArrays(int[] arr1, int[] arr2, int i, int j) {
        int temp = arr1[i];
        arr1[i] = arr2[j];
        arr2[j] = temp;
    }
}
